syntax = "proto3";
package odpf.siren;

import "odpf/third_party/googleapis/google/api/annotations.proto";
import "odpf/third_party/grpc-gateway/protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/odpf/proton/siren";
option java_multiple_files = true;
option java_package = "io.odpf.proton.siren";
option java_outer_classname = "ServiceManager";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        version: "0.1";
    };
    external_docs: {
        description: "Siren server";
    }
    schemes: HTTP;
};

service SirenService {
    rpc Ping(PingRequest) returns (PingResponse) {
        option (google.api.http) = {
            get: "/ping"
        };
    }

    rpc ListAlertHistory(ListAlertHistoryRequest) returns (ListAlertHistoryResponse) {
        option (google.api.http) = {
            get: "/history"
        };
    }

    rpc CreateAlertHistory(CreateAlertHistoryRequest) returns (CreateAlertHistoryResponse) {
        option (google.api.http) = {
            post: "/history"
            body: "*"
        };
    }

    rpc ListWorkspaceChannels(ListWorkspaceChannelsRequest) returns (ListWorkspaceChannelsResponse) {
        option (google.api.http) = {
            get: "/workspaces/{workspace_name}/channels"
        };
    }
    rpc ExchangeCode(ExchangeCodeRequest) returns (ExchangeCodeResponse) {
        option (google.api.http) = {
            post: "/oauth/slack/token",
            body: "*"
        };
    }
    rpc GetAlertCredentials(GetAlertCredentialsRequest) returns (GetAlertCredentialsResponse) {
        option (google.api.http) = {
            get: "/teams/{team_name}/credentials"
        };
    }

    rpc UpdateAlertCredentials(UpdateAlertCredentialsRequest) returns (UpdateAlertCredentialsResponse) {
        option (google.api.http) = {
            put: "/teams/{team_name}/credentials"
            body: "*"
        };
    }

    rpc SendSlackNotification(SendSlackNotificationRequest) returns (SendSlackNotificationResponse) {
        option (google.api.http) = {
            post: "/notifications"
            body: "*"
        };
    }

    rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
        option (google.api.http) = {
            get: "/rules"
        };
    }
    rpc UpdateRule(UpdateRuleRequest) returns (Rule) {
        option (google.api.http) = {
            put: "/rules"
            body: "*"
        };
    }

    rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse) {
        option (google.api.http) = {
            get: "/templates"
        };
    }

    rpc GetTemplateByName(GetTemplateByNameRequest) returns (Template) {
        option (google.api.http) = {
            get: "/templates/{name}"
        };
    }

    rpc UpsertTemplate(UpsertTemplateRequest) returns (Template) {
        option (google.api.http) = {
            put: "/templates",
            body: "*"
        };
    }
    rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse) {
        option (google.api.http) = {
            delete: "/templates/{name}",
        };
    }
    rpc RenderTemplate(RenderTemplateRequest) returns (RenderTemplateResponse) {
        option (google.api.http) = {
            post: "/templates/{name}/render",
            body: "*"
        };
    }
}

message PingRequest {}

message PingResponse {
    string message = 1;
}

message ListAlertHistoryRequest {
    string resource = 1;  
    uint32 start_time = 2;
    uint32 end_time = 3;
}

message ListAlertHistoryResponse {
    repeated AlertHistory alerts = 1;
}

message AlertHistory {
    uint64 id = 1;
    string name = 2;
    string template_id = 3;
    string metric_name = 4;
    string metric_value = 5;
    string level = 6;
    string created_at = 7;
    string updated_at = 8;
}

message Annotations {
    string metric_name = 1;
    string metric_value = 2;
    string resource = 3;
    string template = 4;
}

message Labels {
    string severity = 1;
}

message Alerts {
    Annotations annotations = 1;
    Labels labels = 2;
    string status = 3;
}

message CreateAlertHistoryRequest {
    repeated Alerts alerts = 1;
}

message CreateAlertHistoryResponse {
    repeated AlertHistory alerts = 1;
}

message Workspace {
    string id = 1;
    string name = 2;
}

message ListWorkspaceChannelsRequest {
    string workspace_name = 1;
}

message ListWorkspaceChannelsResponse {
    repeated Workspace data = 1;
}

message ExchangeCodeRequest {
    string code = 1;
    string workspace = 2;
}

message ExchangeCodeResponse {
    bool ok = 1;
}

message GetAlertCredentialsRequest{
    string team_name = 1;
}

message Critical {
    string channel = 1;
}

message Warning {
    string channel = 1;
}

message SlackConfig {
    Critical critical = 1;
    Warning warning = 2;
}

message GetAlertCredentialsResponse {
    string entity = 1;
    string team_name = 2;
    string pagerduty_credentials = 3;
    SlackConfig slack_config = 4;
}

message UpdateAlertCredentialsRequest {
    string entity = 1;
    string team_name = 2;
    string pagerduty_credentials = 3;
    SlackConfig slack_config = 4;
}
message UpdateAlertCredentialsResponse{}


message SendSlackNotificationRequest{
    string provider = 1;
    string entity = 2;
    string message = 3;
    string receiver_name = 4;
    string receiver_type = 5;
    repeated google.protobuf.Struct blocks = 6;
}

message SendSlackNotificationResponse {
    bool ok = 1;
}

message ListRulesRequest {
    string namespace = 1;
    string entity= 2;
    string group_name = 3;
    string status = 4;
    string template = 5;
}

message Variables {
    string name = 1;
    string type = 2;
    string value = 3;
    string description = 4;
}

message Rule {
    uint64 id = 1;
    string name = 2;
    string entity = 3;
    string namespace = 4;
    string group_name = 5;
    string template = 6;
    string status = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp updated_at = 9;
    repeated Variables variables = 10;
}

message ListRulesResponse {
    repeated Rule rules = 1;
}

message UpdateRuleRequest {
    uint64 id = 1;
    string name = 2;
    string entity = 3;
    string namespace = 4;
    string group_name = 5;
    string template = 6;
    string status = 7;
    repeated Variables variables = 10;
}

message ListTemplatesRequest{
    string tag = 1;
}

message TemplateVariables {
    string name = 1;
    string type = 2;
    string default = 3;
    string description = 4;
}

message Template {
    uint64 id = 1;
    string name = 2;
    string body = 3;
    repeated string tags = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    repeated TemplateVariables variables = 7;
}

message UpsertTemplateRequest {
    uint64 id = 1;
    string name = 2;
    string body = 3;
    repeated string tags = 4;
    repeated TemplateVariables variables = 7;
}

message ListTemplatesResponse {
    repeated Template templates = 1;
}

message GetTemplateByNameRequest {
    string name = 1;
}

message DeleteTemplateRequest {
    string name = 1;
}

message DeleteTemplateResponse {}

message RenderTemplateRequest {
    string name = 1;
    map<string, string> variables = 2;
}

message RenderTemplateResponse {
    string body = 1;
}